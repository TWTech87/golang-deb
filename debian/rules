#!/usr/bin/make -f
# This file is in the public domain.
# You may freely use, modify, distribute, and relicense it.

PACKAGE = google-go

DESTDIR := $(CURDIR)/debian/$(PACKAGE)
libexecdir := /usr/lib/golang

build clean install binary-arch binary-indep binary:
	+dh --parallel $(opt_no_act) $@

override_dh_auto_clean:
	rm -f debian/*+
	rm -f debian/build.stamp
	echo '#!/bin/sh' >debian/gomake+
	echo 'exec $(MAKE) "$$@"' >>debian/gomake+
	chmod +x debian/gomake+
	mkdir -p $(GOBIN)
	mv debian/gomake+ $(GOBIN)/gomake
	cd src && bash ./clean.bash
	: NEEDSWORK: update src/pkg/Makefile.
	cd src/pkg && $(GOBIN)/gomake exp/ogle.clean
	rm -f src/pkg/Make.deps
	rm -f test/pass.out test/run.out test/times.out
	rm -f debian/env.sh

override_dh_auto_build: debian/build.stamp debian/env.sh

override_dh_auto_test:
	$(no_check) || { cd src && bash ./run.bash --no-rebuild; }

override_dh_prep:
	dh_prep -Xdebian/google-go

override_dh_compress:
	dh_compress -Xusr/share/doc/$(PACKAGE)/html

override_dh_auto_install:
	mkdir -p $(DESTDIR)$(libexecdir)
	: library
	cp -a pkg $(DESTDIR)$(libexecdir)/
	: runtime
	mkdir -p $(DESTDIR)$(libexecdir)/src/pkg/runtime
	install -m644 src/pkg/runtime/cgocall.h $(DESTDIR)$(libexecdir)/src/pkg/runtime/
	install -m644 src/pkg/runtime/runtime.h $(DESTDIR)$(libexecdir)/src/pkg/runtime/
	install -m644 debian/env.sh $(DESTDIR)$(libexecdir)/env.sh
	: web apps
	mkdir -p $(DESTDIR)$(libexecdir)/lib
	cp -a lib/codereview $(DESTDIR)$(libexecdir)/lib/
	cp -a lib/godoc $(DESTDIR)$(libexecdir)/lib/
	: documentation
	rm -fr $(DESTDIR)/usr/share/doc/$(PACKAGE)/html
	mkdir -p $(DESTDIR)/usr/share/doc/$(PACKAGE)
	cp -a doc $(DESTDIR)/usr/share/doc/$(PACKAGE)/html
	dh_link /usr/share/doc/$(PACKAGE)/html $(libexecdir)/doc
	install -m644 favicon.ico $(DESTDIR)$(libexecdir)/
	: wrappers
	mkdir -p $(DESTDIR)/usr/bin
	for i in $(GOBIN)/*; \
	do \
		f=$$(basename "$$i") && \
		wrapper=$(DESTDIR)/usr/bin/$$f && \
		echo '#!/bin/sh' >$$wrapper+ && \
		echo '. $(libexecdir)/env.sh' >>$$wrapper+ && \
		echo 'exec $(libexecdir)/bin/'$$f' "$$@"' >>$$wrapper+ && \
		chmod 755 $$wrapper+ && \
		if ! cmp -s $$wrapper+ $$wrapper; \
		then \
			mv $$wrapper+ $$wrapper; \
		else \
			rm $$wrapper+; \
		fi; \
	done

override_dh_strip:
	dh_strip -X".a" -Xgoinstall -Xgodoc -Xgoyacc -Xhgpatch -Xbin/cgo -Xebnflint -Xgofmt

debian/build.stamp:
	rm -f debian/build.stamp
	mkdir -p $(GOBIN)
	cd src && bash ./make.bash
	>debian/build.stamp

debian/env.sh:
	>$@+
	echo '# runtime parameters for Go' >>$@+
	if test "$$GOARM"; \
	then \
		echo 'export GOROOT GOOS GOARCH GOARM GOBIN' >>$@+ && \
		echo ": \$${GOARM=$$GOARM}" >>$@+; \
	else \
		echo 'export GOROOT GOOS GOARCH GOBIN' >>$@+; \
	fi
	echo ': $${GOROOT=$(libexecdir)}' >>$@+
	echo ': $${GOOS=$(GOOS)}' >>$@+
	echo ': $${GOARCH=$(GOARCH)}' >>$@+
	echo ': $${GOBIN=$(libexecdir)/bin}' >>$@+
	if ! cmp -s $@ $@+; \
	then \
		mv $@+ $@; \
	else \
		rm $@+; \
	fi

opt_no_act =
no_check = ! :

ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
    $(warning no support for disabling optimization)
endif

ifneq (,$(findstring n,$(MAKEFLAGS)))
    opt_no_act = --no-act
endif

ifneq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))
    no_check = :
endif

GOROOT := $(CURDIR)
GOBIN := $(DESTDIR)$(libexecdir)/bin
GOARM :=

DEB_HOST_ARCH_OS := $(shell dpkg-architecture -qDEB_HOST_ARCH_OS 2>/dev/null)
DEB_HOST_ARCH_CPU := $(shell dpkg-architecture -qDEB_HOST_ARCH_CPU 2>/dev/null)

ifeq ($(DEB_HOST_ARCH_OS), kfreebsd)
    GOOS := freebsd
else
    ifeq (,$(findstring $(DEB_HOST_ARCH_OS), linux freebsd darwin))
        $(warning unrecognized kernel $(DEB_HOST_ARCH_OS)! continuing.)
    endif
    GOOS := $(DEB_HOST_ARCH_OS)
endif

ifeq ($(DEB_HOST_ARCH_CPU), i386)
    GOARCH := 386
else ifeq ($(DEB_HOST_ARCH_CPU), amd64)
    GOARCH := amd64
else ifeq (,$(findstring $(DEB_HOST_ARCH_CPU), arm armeb armel))
    GOARCH := arm
    GOARM := 5
else
    $(warning unrecognized instruction set $(DEB_HOST_ARCH_CPU)! continuing.)
    GOARCH := $(DEB_HOST_ARCH_CPU)
endif

export GOROOT GOOS GOARCH GOARM GOBIN

REPO = https://go.googlecode.com/hg/
REV = release
get-orig-source:
	mkdir debian-orig-source
	-set -e; cd debian-orig-source; \
	hg clone -U -r"$(REV)" "$(REPO)" go; \
	( \
		cd go; \
		hg pull; \
		VERSION=$$( \
			hg identify -t -r"$(REV)" | \
			perl -e '<> =~ /release\.(\d+)-(\d+)-(\d+)/; print "$$1.$$2.$$3"' \
		); \
		hg archive -ttgz -p"google-go-$$VERSION/" -r"$(REV)" -X'.hg*' \
			../../google-go_$$VERSION.orig.tar.gz; \
	)
	rm -fr debian-orig-source
